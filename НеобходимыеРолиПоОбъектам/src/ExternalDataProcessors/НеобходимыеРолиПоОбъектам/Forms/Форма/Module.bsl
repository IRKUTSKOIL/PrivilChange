
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьТипыОбъектовМетаданных();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТипыОбъектовМетаданных()
	
	СписокТипов = Элементы.ТипОбъектаМетаданных.СписокВыбора;
	
	СписокТипов.Добавить("Константы");
	СписокТипов.Добавить("Справочники");
	СписокТипов.Добавить("Документы");
	СписокТипов.Добавить("Отчеты");
	СписокТипов.Добавить("Обработки");
	СписокТипов.Добавить("ПланыВидовХарактеристик", "Планы видов характеристик");
	СписокТипов.Добавить("РегистрыСведений", "Регистры сведений");
	СписокТипов.Добавить("РегистрыНакопления", "Регистры накопления");
	СписокТипов.Добавить("РегистрыБухгалтерии", "Регистры бухгалтерии");
	
КонецПроцедуры

&НаКлиенте
Процедура ТипОбъектаМетаданныхПриИзменении(Элемент)
	
	ТипОбъектаМетаданныхПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТипОбъектаМетаданныхПриИзмененииНаСервере()
	
	СписокОбъектов = Элементы.ОбъектМетаданных.СписокВыбора;
	СписокОбъектов.Очистить();
	Для Каждого пОбъектМетаданных Из Метаданные[ТипОбъектаМетаданных] Цикл
		
		СписокОбъектов.Добавить(пОбъектМетаданных.Имя, пОбъектМетаданных.Синоним);
		
	КонецЦикла;
	
	Если СписокОбъектов.Количество() > 0 Тогда
		ОбъектМетаданных = СписокОбъектов[0].Значение;
	Иначе
		ОбъектМетаданных = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДоступныеПрава(ТипОбъектаМетаданных)
	
	ДоступныеПрава = Новый Массив;
	
	Если ТипОбъектаМетаданных = "Отчеты"
		ИЛИ ТипОбъектаМетаданных = "Обработки" Тогда
		
		ДоступныеПрава.Добавить("Использование");
		ДоступныеПрава.Добавить("Просмотр");
		
		Возврат ДоступныеПрава;
		
	КонецЕсли;
	
	Если Найти(ТипОбъектаМетаданных, "Регистры") = 0
		И НЕ ТипОбъектаМетаданных = "Константы" Тогда
		
		ДоступныеПрава.Добавить("Добавление");
		
	КонецЕсли;
	
	ДоступныеПрава.Добавить("Чтение");
	ДоступныеПрава.Добавить("Изменение");
	ДоступныеПрава.Добавить("Просмотр");
	ДоступныеПрава.Добавить("Редактирование");
	
	Возврат ДоступныеПрава;
	
КонецФункции

&НаСервере
Процедура СформироватьНаСервере()
	
	ОтчетПоРолям.Очистить();
	
	ДоступныеПрава = ДоступныеПрава(ТипОбъектаМетаданных);
	
	Для Каждого Роль Из Метаданные.Роли Цикл
		
		Для Каждого Право Из ДоступныеПрава Цикл
			
			Если ПравоДоступа(Право, Метаданные[ТипОбъектаМетаданных][ОбъектМетаданных], Роль) Тогда
				
				НайденныеСтроки = ОтчетПоРолям.НайтиСтроки(Новый Структура("Роль", Строка(Роль)));
				
				Если НайденныеСтроки.Количество() = 0 Тогда
					НоваяСтрока = ОтчетПоРолям.Добавить();
				Иначе
					НоваяСтрока = НайденныеСтроки[0];
				КонецЕсли;
				
				НоваяСтрока.Роль = Строка(Роль);
				НоваяСтрока[Право] = Истина;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Сформировать(Команда)
	
	Если ПустаяСтрока(ТипОбъектаМетаданных)
		ИЛИ ПустаяСтрока(ОбъектМетаданных) Тогда
		
		ПоказатьПредупреждение(,"Укажите проверяемый объект");
		Возврат;
		
	КонецЕсли;
	
	СформироватьНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРолиНаСервере()
	
	Для Каждого Роль Из Метаданные.Роли Цикл
		Строка = ТаблицаРоли.Добавить();
		Строка.Роль = Роль.Имя;
		Строка.РольИмя = Роль.Синоним;
	КонецЦикла;
	
	ТаблицаРоли.Сортировать("РольИмя");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПользователейНаСервере()
	
	ТаблицаПользователи.Очистить();
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Пользователи.Ссылка КАК Пользователь,
		|	Пользователи.Код КАК ПользовательКод,
		|	Пользователи.Наименование КАК ПользовательИмя,
		|	Пользователи.ИдентификаторПользователяИБ
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи");
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	МассивПользователейИБ = ПользователиИнформационнойБазы.ПолучитьПользователей();
	Для Каждого ПользовательИБ Из МассивПользователейИБ Цикл
		
		СтрокаТаб = ТаблицаПользователи.Добавить();
		СтрокаТаб.ИдентификаторПользователяИБ = ПользовательИБ.УникальныйИдентификатор;
		СтрокаТаб.ПользовательИБ 			  = ПользовательИБ.Имя;
		СтрокаТаб.АутентификацияСтандартная   = ПользовательИБ.АутентификацияСтандартная;
		СтрокаТаб.АутентификацияОС 			  = ПользовательИБ.АутентификацияОС;
		СтрокаТаб.ПользовательОС 			  = ПользовательИБ.ПользовательОС;
		
		Выборка.Сбросить();
		Если Выборка.НайтиСледующий(Новый Структура("ИдентификаторПользователяИБ",ПользовательИБ.УникальныйИдентификатор)) Тогда
			СтрокаТаб.Пользователь = Выборка.Пользователь;
			СтрокаТаб.ПользовательИмя = Выборка.ПользовательИмя;
			СтрокаТаб.ПользовательКод = Выборка.ПользовательКод;
			СтрокаТаб.ЕстьСсылка = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПользователиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекСтрока = ТаблицаПользователи.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	ПоказатьЗначение(,ТекСтрока.Пользователь);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьРоли(Команда)
	ДобавитьРолиНаСервере();
КонецПроцедуры

&НаСервере
Процедура ДобавитьРолиНаСервере()
	
	ОтмеченныеПользователи = ТаблицаПользователи.НайтиСтроки(Новый Структура("Отметка", Истина));
	ОтмеченныеРоли = ТаблицаРоли.НайтиСтроки(Новый Структура("Отметка", Истина));
	
	Если ОтмеченныеПользователи.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Нужно отметить хотя бы одного пользователя.");
		Возврат;
	КонецЕсли;
	
	Если ОтмеченныеРоли.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Нужно отметить хотя бы одну роль.");
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаПользователь Из ОтмеченныеПользователи Цикл
		
		УИДЮзера = Новый УникальныйИдентификатор(СтрокаПользователь.ИдентификаторПользователяИБ);
		
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(УИДЮзера);
		Если ПользовательИБ = Неопределено Тогда
			Продолжить
		КонецЕсли;
		
		Для Каждого СтрокаРоль Из ОтмеченныеРоли Цикл
			ПользовательИБ.Роли.Добавить(Метаданные.Роли[СтрокаРоль.Роль]);
		КонецЦикла;
		
		ПользовательИБ.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьПользователей(Команда)
	
	Для Каждого ИдСтроки Из Элементы.ТаблицаПользователи.ВыделенныеСтроки Цикл
		ТекСтрока = ТаблицаПользователи.НайтиПоИдентификатору(ИдСтроки);
		ТекСтрока.Отметка = НЕ ТекСтрока.Отметка;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПользователей(Команда)
	
	ТекстJSON = "";
	УдалитьПользователейНаСервере(ТекстJSON);
	
	Если ТекстJSON <> "" Тогда
		ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		ДиалогВыбораФайла.Заголовок = "Куда сохранить результат?";
		ДиалогВыбораФайла.Фильтр = НСтр("ru = 'JSON'; en = 'JSON'")+ "(*.json)|*.json";
		ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("ДиалогСохраненияФайлаЗавершение", ЭтотОбъект, ТекстJSON));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДиалогСохраненияФайлаЗавершение(Результат, ТекстJSON) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Массив") Тогда
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.УстановитьТекст(ТекстJSON);
		ТекстовыйДокумент.Записать(Результат[0]);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьПользователейНаСервере(ТекстJSON = "")
	
	ОтмеченныеПользователи 	 = ТаблицаПользователи.НайтиСтроки(Новый Структура("ЕстьСсылка, Отметка", Истина, Истина));
	ОтмеченныеПользователиИБ = ТаблицаПользователи.НайтиСтроки(Новый Структура("ЕстьСсылка, Отметка", Ложь, Истина));
	
	Если ОтмеченныеПользователи.Количество() = 0 И ОтмеченныеПользователиИБ.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Нужно отметить хотя бы одного пользователя.");
		Возврат;
	КонецЕсли;
	
	// получим массив ссылок для удаления
	ТаблицаОтмеченных = ТаблицаПользователи.Выгрузить(ОтмеченныеПользователи, "Пользователь, ИдентификаторПользователяИБ, ПользовательИмя");
	УдаляемыеПользователи = ТаблицаОтмеченных.ВыгрузитьКолонку("Пользователь");
	
	// выполним удаление с контролем ссылочной целостности,
	// вместе со ссылками удаляются и пользователи ИБ
	РезультатУдаления = Обработки.УдалениеПомеченныхОбъектов.УдалитьПомеченныеОбъекты(УдаляемыеПользователи,);
	
	Если РезультатУдаления.Статус = Ложь Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Не удалось выполнить удаление пользователей из базы. Ошибка: " + РезультатУдаления.Значение);
		Возврат;
	КонецЕсли;
	
	// отдельно удалим отмеченных пользователей ИБ, для которых не найдена ссылка
	Для Каждого СтрокаПользИБ Из ОтмеченныеПользователиИБ Цикл
		
		УИДЮзера = Новый УникальныйИдентификатор(СтрокаПользИБ.ИдентификаторПользователяИБ);
		
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(УИДЮзера);
		Если ПользовательИБ = Неопределено Тогда
			Продолжить
		КонецЕсли;

		Попытка
			ПользовательИБ.Удалить();
		Исключение
			// действие не требуется
		КонецПопытки;

	КонецЦикла;

	// заново заполним таблицу пользователей
	ЗаполнитьПользователейНаСервере();
	
	// вернем отметку для тех, которых удалить не получилось
	НайденныеСсылки = РезультатУдаления.Значение;
	Если НайденныеСсылки.Количество() Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось удалить некоторых пользователей, т.к. на них найдены ссылки.");
		
		МассивИскомыхСсылок = ОбщегоНазначенияКлиентСервер.СвернутьМассив(НайденныеСсылки.ВыгрузитьКолонку(0));
		Для Каждого Искомый Из МассивИскомыхСсылок Цикл
			ИскомыйСтроки = ТаблицаПользователи.НайтиСтроки(Новый Структура("Пользователь", Искомый));
			Если ИскомыйСтроки.Количество() Тогда
				ИскомыйСтроки[0].Отметка = Истина;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		МассивИскомыхСсылок = Новый Массив;
	КонецЕсли;
	
	МассиДляЗаписиJSON = Новый Массив;
	
	Для Каждого ОтмПользователь Из ТаблицаОтмеченных Цикл
		
		Если МассивИскомыхСсылок.Найти(ОтмПользователь.Пользователь) = Неопределено Тогда
			МассиДляЗаписиJSON.Добавить(Новый Структура("UAname", ОтмПользователь.ПользовательИмя));
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассиДляЗаписиJSON.Количество() Тогда
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		
		ЗаписатьJSON(ЗаписьJSON, МассиДляЗаписиJSON);
		
		ТекстJSON = ЗаписьJSON.Закрыть();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УдалитьПользователейИБ(Команда)
	УдалитьПользователейИБНаСервере();
КонецПроцедуры

&НаСервере
Процедура УдалитьПользователейИБНаСервере()

	ОтмеченныеПользователи = ТаблицаПользователи.НайтиСтроки(Новый Структура("Отметка", Истина));
	
	Если ОтмеченныеПользователи.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Нужно отметить хотя бы одного пользователя.");
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаПользователь Из ОтмеченныеПользователи Цикл
		
		УИДЮзера = Новый УникальныйИдентификатор(СтрокаПользователь.ИдентификаторПользователяИБ);
		
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(УИДЮзера);
		Если ПользовательИБ = Неопределено Тогда
			Продолжить
		КонецЕсли;

		Попытка
			ПользовательИБ.Удалить();
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Для пользователя "+СтрокаПользователь.ПользовательИмя+" не удалось удалить пользователя ИБ.", СтрокаПользователь.Пользователь);
		КонецПопытки;
		
	КонецЦикла;
	
	ЗаполнитьПользователейНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПользователей(Команда)
	
	ЗаполнитьПользователейНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРоли(Команда)
	
	ЗаполнитьРолиНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЛогиныИзДругойБазы(Команда)
	
	Отказ = Ложь;
	
	Если ПустаяСтрока(СтрокаПодключения) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указана строка подключения!",,"СтрокаПодключения",,Отказ);
	КонецЕсли;

	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Строка(ТекущаяДата()) + " | " + " заполнение таблицы логинов");
	
	ЗаполнитьЛогиныИзДругойБазыНаСервере();

	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Строка(ТекущаяДата()) + " | " + " таблица логинов заполнена");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЛогиныИзДругойБазыНаСервере()
	
	Попытка
		
		V83COMConnector = Новый COMОбъект("V83.COMConnector");
		БазаИсточник = V83COMConnector.Connect(СтрокаПодключения);
		
		ВерсияБазаИсточник = БазаИсточник.Метаданные.Версия;
		
		ИмяБазаИсточник = БазаИсточник.Метаданные.Name;
		Если  ИмяБазаИсточник <> "УправлениеНСИ" Тогда
			ВызватьИсключение "Версия " + ИмяБазаИсточник + " " + ВерсияБазаИсточник + " не поддерживается.";
		КонецЕсли;
		
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось подключиться, ошибка: "+ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;
	
	ОтмеченныеПользователи = ТаблицаПользователи.НайтиСтроки(Новый Структура("Отметка", Истина));
	Если ОтмеченныеПользователи.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Нужно отметить хотя бы одного пользователя.");
		Возврат;
	КонецЕсли;
	
	ТаблицаЛогины.Очистить();
	
	ТаблицаОтмеченных = ТаблицаПользователи.Выгрузить(ОтмеченныеПользователи);
	Для каждого Строка Из ТаблицаОтмеченных Цикл
		Строка.ПользовательОС = НРег(Строка.ПользовательОС);
	КонецЦикла; 
	ТаблицаОтмеченных.Индексы.Добавить("ПользовательОС");
	
	МассивЮзеровИББазаИсточник = БазаИсточник.ПользователиИнформационнойБазы.ПолучитьПользователей();
	Для каждого ЮзерИББазаИсточник Из МассивЮзеровИББазаИсточник Цикл
		
		Если ЮзерИББазаИсточник.АутентификацияОС И ЗначениеЗаполнено(ЮзерИББазаИсточник.ПользовательОС) Тогда
			
			ТекЮзерСтрока = ТаблицаОтмеченных.Найти(НРег(ЮзерИББазаИсточник.ПользовательОС), "ПользовательОС");
			Если ТекЮзерСтрока = Неопределено ИЛИ ТекЮзерСтрока.ПользовательИБ = ЮзерИББазаИсточник.Имя Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаЛогин = ТаблицаЛогины.Добавить();
			СтрокаЛогин.ИдентификаторПользователяИБ = ТекЮзерСтрока.ИдентификаторПользователяИБ;
			СтрокаЛогин.ЛогинТекущий = ТекЮзерСтрока.ПользовательИБ;
			СтрокаЛогин.ЛогинНовый = ЮзерИББазаИсточник.Имя;
			
		КонецЕсли; 
		
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЛогиныИзДругойБазыНаСервере()
	
	Для каждого Строка Из ТаблицаЛогины Цикл
		
		УИДЮзера = Новый УникальныйИдентификатор(Строка.ИдентификаторПользователяИБ);
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(УИДЮзера);
		Если ПользовательИБ = Неопределено Тогда
			Продолжить
		КонецЕсли;
		
		ПользовательИБ.Имя = Строка.ЛогинНовый;
		
		СтруктураПоиска = Новый Структура("ИдентификаторПользователяИБ", Строка.ИдентификаторПользователяИБ);
		
		Попытка
			
			ПользовательИБ.Записать();
			
			СтрокиП = ТаблицаПользователи.НайтиСтроки(СтруктураПоиска);
			Если СтрокиП.Количество() Тогда
				
				СтрокаП = СтрокиП[0];
				
				СтрокаП.ПользовательИБ = Строка.ЛогинНовый;
				
				ЮзерОбъект = СтрокаП.Пользователь.ПолучитьОбъект();
				ЮзерОбъект.Код = Строка.ЛогинНовый;
				ЮзерОбъект.ОбменДанными.Загрузка = Истина;
				ЮзерОбъект.Записать();
				
			КонецЕсли; 
			
		Исключение
		    ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Не удалось изменить имя пользователя "+ПользовательИБ.Имя+" на имя "+Строка.ЛогинНовый+". Ошибка: " 
				+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	КонецЦикла; 
	
	ТаблицаЛогины.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЛогиныИзДругойБазы(Команда)
	УстановитьЛогиныИзДругойБазыНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВыровнятьКодыПользователей(Команда)
	ВыровнятьКодыПользователейНаСервере();
КонецПроцедуры

&НаСервере
Процедура ВыровнятьКодыПользователейНаСервере()
	
	Для каждого Строка Из ТаблицаПользователи Цикл
		
		Если НЕ ПустаяСтрока(Строка.ПользовательКод) И НЕ ПустаяСтрока(Строка.ПользовательИБ) 
			И СокрЛП(Строка.ПользовательКод) <> СокрЛП(Строка.ПользовательИБ) Тогда
			ЮзерОбъект = Строка.Пользователь.ПолучитьОбъект();
			ЮзерОбъект.Код = Строка.ПользовательИБ;
			ЮзерОбъект.ОбменДанными.Загрузка = Истина;
			ЮзерОбъект.Записать();
		КонецЕсли; 
		
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьИзФайла(Команда)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Фильтр = НСтр("ru = 'Текст'; en = 'Text'")+ "(*.txt,csv)|*.txt;*.csv";
	ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("ДиалогВыбораОтметитьИзФайлаЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ДиалогВыбораОтметитьИзФайлаЗавершение(Результат, ДопПараметры) Экспорт
	// tode test 2
	Если ТаблицаПользователи.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	// tode test 22
	Если ТипЗнч(Результат) = Тип("Массив") Тогда
		
		ИмяФайла = Результат[0];
		
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.Прочитать(ИмяФайла, КодировкаТекста.UTF8);	// todo тест 1
		
		ТекстФайла = ТекстовыйДокумент.ПолучитьТекст();
		
		Для каждого Строка Из ТаблицаПользователи Цикл
			
			Если Строка.Пользователь.Пустая() Тогда
				Продолжить;
			КонецЕсли; 
			
			ФИОЮзера = СокрЛП(""+Строка.Пользователь);
			
			Если СтрНайти(ТекстФайла, ФИОЮзера) Тогда
				Строка.Отметка = Истина;
			КонецЕсли; 
			
		КонецЦикла; 
		
	КонецЕсли; 
	
КонецПроцедуры